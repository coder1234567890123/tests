// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  roles     Json? // Assuming roles are stored as JSON
  enabled   Boolean  @default(true)
  companyId String?
  teamId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token            String?   @unique // For password reset or other tokens
  tokenRequested   DateTime? // Expiry for the token
  primaryMobile    String?   // For SMS notifications

  company Company? @relation(fields: [companyId], references: [id])
  team    Team?    @relation(fields: [teamId], references: [id])

  assignedReports Report[] @relation("AssignedToUser")
  ledTeam         Team?    @relation("TeamLeader")

  userGroupId String?
  userGroup   UserGroup? @relation("UserToUserGroup", fields: [userGroupId], references: [id])

  approvedReports Report[]   @relation("ReportApprovedBy")
  createdReports  Report[]   @relation("UserCreatedReport")
  answersProvided Answer[]   @relation("UserAnswered")
  commentsMade    Comment[]  @relation("UserCommented")
  createdAccounts Accounts[] @relation("UserCreatedAccount")

  triggeredEmails EmailTracker[] @relation("EmailTrackerUserTrigger")
  assignedEmails  EmailTracker[] @relation("EmailTrackerAssignedTo")
  teamLeadEmails  EmailTracker[] @relation("EmailTrackerTeamLead")
  messagesForUser EmailTracker[] @relation("EmailTrackerMessageFor")

  triggeredSystemMessages MessageSystem[] @relation("MessageSystemUserTrigger")
  assignedSystemMessages  MessageSystem[] @relation("MessageSystemAssignedTo")
  teamLeadSystemMessages  MessageSystem[] @relation("MessageSystemTeamLead")
  systemMessagesForUser   MessageSystem[] @relation("MessageSystemMessageFor")

  createdPhrases   Phrase[]       @relation("UserCreatedPhrase")
  actionsPerformed UserTracking[] @relation("UserPerformingAction")
  createdSubjects  Subject[]      @relation("UserCreatedSubjects")
}

model Company {
  id                 String  @id @default(uuid())
  name               String
  registrationNumber String?
  vatNumber          String?
  email              String?
  phone              String?
  street1            String?
  street2            String?
  suburb             String?
  city               String?
  postalCode         String?
  province           String?
  brandingType       String?
  pdfPassword        String?
  themeColor         String?
  footerLink         String?
  disclaimer         String? @db.Text
  useDisclaimer      Boolean   @default(false) // New field
  coverLogo          String?   // New field for company-specific cover logo
  imageFooterLogo    String?   // New field for company-specific footer logo
  imageFrontPage     String?   // New field for company-specific front page image (cover)

  countryId String?
  teamId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country Country? @relation(fields: [countryId], references: [id])
  team    Team?    @relation(fields: [teamId], references: [id])
  users   User[]

  reports  Report[]
  subjects Subject[]
  accounts Accounts[]

  companyProducts CompanyProduct[]
  systemMessages  MessageSystem[]  @relation("MessageSystemCompany")
  trackingRecords UserTracking[]   @relation("UserTrackingCompany")
  emailTrackers   EmailTracker[]   @relation("EmailTrackerCompany")
}

model Team {
  id           String   @id @default(uuid())
  teamName     String?
  teamLeaderId String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  teamLeader User      @relation("TeamLeader", fields: [teamLeaderId], references: [id])
  users      User[]
  companies  Company[]
}

model Country {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companies Company[]
  subjects  Subject[]
}

model Subject {
  id                  String    @id @default(uuid())
  blobFolder          String?   @default(uuid())
  identification      String
  firstName           String
  middleName          String?
  lastName            String
  maidenName          String?
  nickname            String?
  handles             Json?     @default("[]")
  gender              String?
  dateOfBirth         DateTime?
  primaryEmail        String?
  secondaryEmail      String?
  primaryMobile       String?
  secondaryMobile     String?
  educationInstitutes Json?     @default("[]")
  province            String?
  imageFile           String?
  status              String?
  reportType          String
  allowTrait          Boolean   @default(true)
  rushReport          Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  countryId   String?
  country     Country? @relation(fields: [countryId], references: [id])
  createdById String?
  createdBy   User?    @relation("UserCreatedSubjects", fields: [createdById], references: [id])

  addressId String?  @unique
  address   Address? @relation(fields: [addressId], references: [id])

  profiles         Profile[]
  qualifications   Qualification[]
  employments      Employment[]
  reports          Report[]
  identityConfirms IdentityConfirm[]
  proofStorages    ProofStorage[]
  messageQueues    MessageQueue[]
  answers          Answer[]          @relation("SubjectAnswers")

  systemMessages  MessageSystem[] @relation("MessageSystemSubject")
  emailTrackers   EmailTracker[]  @relation("EmailTrackerSubject")
  trackingRecords UserTracking[]  @relation("UserTrackingSubject")
}

model Address {
  id         String   @id @default(uuid())
  street     String?
  suburb     String?
  city       String?
  postalCode String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  subjects    Subject[]
  employments Employment[]
}

model Report {
  id                    String    @id @default(uuid())
  sequence              String    @unique
  status                String?
  riskScore             Float?
  completedDate         DateTime?
  dueDate               DateTime?
  optionValue           Int       @default(0)
  riskComment           String?   @db.Text
  blobUrl               String?
  pdfFilename           String?
  hideGeneralComments   Boolean   @default(false)
  hideReportScore       Boolean   @default(false)
  reportScores          Json?
  socialMediaScores     Json?
  overWriteReportScores Boolean   @default(false)
  reportScoresUpdated   Json?
  requestType           String?
  open                  Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  subjectId    String
  subject      Subject  @relation(fields: [subjectId], references: [id])
  assignedToId String?
  assignedTo   User?    @relation("AssignedToUser", fields: [assignedToId], references: [id])
  approvedById String?
  approvedBy   User?    @relation("ReportApprovedBy", fields: [approvedById], references: [id])
  createdById  String?
  createdBy    User?    @relation("UserCreatedReport", fields: [createdById], references: [id])
  companyId    String?
  company      Company? @relation(fields: [companyId], references: [id])

  answers         Answer[]
  comments        Comment[]
  emailTrackers   EmailTracker[]
  trackingRecords UserTracking[] @relation("UserTrackingReport")
}

model Profile {
  id           String   @id @default(uuid())
  platform     String
  link         String   @db.Text
  firstName    String?
  lastName     String?
  emailAddress String?
  phone        String?
  phrase       String?
  priority     Int      @default(0)
  valid        Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])
}

model Question {
  id               String   @id @default(uuid())
  question         String   @db.Text
  reportLabel      String?
  answerType       String
  reportTypes      Json     @default("[]")
  answerOptions    Json?    @default("[]")
  answerScore      Json?    @default("[]")
  sliderValues     Json?    @default("[]")
  platform         String
  slider           Boolean  @default(false)
  sliderAverage    Int      @default(0)
  orderNumber      Int      @default(0)
  defaultQuestions Boolean  @default(false)
  defaultName      String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  answers Answer[]
}

model Answer {
  id            String   @id @default(uuid())
  answer        String?  @db.Text
  score         String?
  labelAnswer   String?
  sliderValue   Int      @default(0)
  defaultName   String?
  platform      String?
  notApplicable Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  questionId String?
  question   Question? @relation(fields: [questionId], references: [id])
  reportId   String
  report     Report    @relation(fields: [reportId], references: [id])
  userId     String?
  user       User?     @relation("UserAnswered", fields: [userId], references: [id])
  subjectId  String?
  subject    Subject?  @relation("SubjectAnswers", fields: [subjectId], references: [id])

  proofs Proof[]
}

model Comment {
  id          String   @id @default(uuid())
  comment     String   @db.Text
  commentType String   @default("normal")
  approval    String?
  private     Boolean  @default(false)
  hidden      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reportId    String?
  report      Report? @relation(fields: [reportId], references: [id])
  commentById String?
  commentBy   User?   @relation("UserCommented", fields: [commentById], references: [id])
}

model Proof {
  id              String   @id @default(uuid())
  comment         String?  @db.Text
  behaviourScores Json?
  trait           Boolean  @default(false)
  filePath          String? // Path where the file is stored on the server
  originalFilename  String?
  mimeType          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  answerId       String
  answer         Answer        @relation(fields: [answerId], references: [id])
  proofStorageId String?
  proofStorage   ProofStorage? @relation(fields: [proofStorageId], references: [id])
  // createdById    String?
  // createdBy      User?    @relation("UserCreatedProof", fields: [createdById], references: [id])
}

model ProofStorage {
  id        String   @id @default(uuid())
  imageFile String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subjectId String?
  subject   Subject? @relation(fields: [subjectId], references: [id])
  proofs    Proof[]
}

model Qualification {
  id        String    @id @default(uuid())
  name      String
  startDate DateTime?
  endDate   DateTime?
  institute String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])
}

model Employment {
  id                String    @id @default(uuid())
  employer          String
  startDate         DateTime?
  endDate           DateTime?
  jobTitle          String
  province          String?
  currentlyEmployed Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  addressId String?  @unique
  address   Address? @relation(fields: [addressId], references: [id])
}

model Accounts {
  id                  String   @id @default(uuid())
  monthlyUnits        Int?
  addUnit             Int?
  unitUsed            Int?
  rejectUnit          Int?
  totalUnitUsed       Int?
  totalUnitAdd        Int?
  monthlyReset        Boolean  @default(false)
  requestType         String?
  monthlyRecurring    Boolean  @default(true)
  monthlyResetAmounts Boolean  @default(true)
  resetMonthlyAmounts Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  companyId   String
  company     Company @relation(fields: [companyId], references: [id])
  createdById String?
  createdBy   User?   @relation("UserCreatedAccount", fields: [createdById], references: [id])
}

model Product {
  id        String   @id @default(uuid())
  name      String?
  type      String?
  bundle    Int?
  enable    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyProducts CompanyProduct[]
}

model CompanyProduct {
  id                  String   @id @default(uuid())
  productType         String?
  monthlyRecurring    Boolean  @default(true)
  unitsCarryOver      Boolean  @default(false)
  bundleAmount        Int?
  rushedUnitPrice     Int?
  normalUnitPrice     Int?
  testUnitPrice       Int?
  amountCompleted     Int?
  additionalRequested Int?
  suspended           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
}

model DefaultBranding {
  id               String   @id @default(uuid())
  themeColor       String?
  themeColorSecond String?
  frontPage        String?
  coFrontPage      String?
  logo             String?
  coverLogo        String?
  footerLink       String?
  disclaimer       String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model EmailTracker {
  id            String   @id @default(uuid())
  messageHeader String
  message       String   @db.Text
  messageType   String
  status        String?
  messageRead   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  companyId    String?
  company      Company? @relation("EmailTrackerCompany", fields: [companyId], references: [id])
  subjectId    String?
  subject      Subject? @relation("EmailTrackerSubject", fields: [subjectId], references: [id])
  reportId     String?
  report       Report?  @relation(fields: [reportId], references: [id])
  userId       String?
  user         User?    @relation("EmailTrackerUserTrigger", fields: [userId], references: [id])
  assignedToId String?
  assignedTo   User?    @relation("EmailTrackerAssignedTo", fields: [assignedToId], references: [id])
  teamLeadId   String?
  teamLead     User?    @relation("EmailTrackerTeamLead", fields: [teamLeadId], references: [id])
  messageForId String?
  messageFor   User?    @relation("EmailTrackerMessageFor", fields: [messageForId], references: [id])
}

model GlobalWeights {
  id                   String   @id @default(uuid())
  socialPlatform       String   @unique
  globalUsageWeighting Float // Changed to Float for more precision
  version              Int      @default(1)
  ordering             Int      @default(0)
  stdComments          Json?    @default("[]")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model UserGroup {
  id        String   @id @default(uuid())
  name      String   @unique
  roles     Json     @default("[]")
  enabled   Boolean  @default(true)
  archived  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[] @relation("UserToUserGroup")
}

model IdentityConfirm {
  id                        String   @id @default(uuid())
  platform                  String
  identityName              Boolean  @default(false)
  identityMiddleName        Boolean  @default(false)
  identityInitials          Boolean  @default(false)
  identitySurname           Boolean  @default(false)
  identityImage             Boolean  @default(false)
  identityLocation          Boolean  @default(false)
  identityEmploymentHistory Boolean  @default(false)
  identityAcademicHistory   Boolean  @default(false)
  identityCountry           Boolean  @default(false)
  identityProfileImage      Boolean  @default(false)
  identityIdNumber          Boolean  @default(false)
  identityContactNumber     Boolean  @default(false)
  identityEmailAddress      Boolean  @default(false)
  identityPhysicalAddress   Boolean  @default(false)
  identityTag               Boolean  @default(false)
  identityAlias             Boolean  @default(false)
  identityLink              Boolean  @default(false)
  identityLocationHistory   Boolean  @default(false)
  identityHandle            Boolean  @default(false)
  identityTitle             Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])
}

model MessageQueue {
  id              String   @id @default(uuid())
  searchType      String
  phrase          String   @db.Text
  token           String   @unique
  messageReceived Boolean  @default(false)
  overWritten     Boolean  @default(false)
  systemOverWrite Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])
}

model MessageSystem {
  id            String   @id @default(uuid())
  messageHeader String
  message       String   @db.Text
  messageType   String
  status        String?
  messageRead   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  companyId    String?
  company      Company? @relation("MessageSystemCompany", fields: [companyId], references: [id])
  subjectId    String?
  subject      Subject? @relation("MessageSystemSubject", fields: [subjectId], references: [id])
  userId       String?
  user         User?    @relation("MessageSystemUserTrigger", fields: [userId], references: [id])
  assignedToId String?
  assignedTo   User?    @relation("MessageSystemAssignedTo", fields: [assignedToId], references: [id])
  teamLeadId   String?
  teamLead     User?    @relation("MessageSystemTeamLead", fields: [teamLeadId], references: [id])
  messageForId String?
  messageFor   User?    @relation("MessageSystemMessageFor", fields: [messageForId], references: [id])
}

model Phrase {
  id         String   @id @default(uuid())
  phrase     String   @db.Text
  searchType String
  enabled    Boolean  @default(true)
  archived   Boolean  @default(false)
  priority   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  createdById String?
  createdBy   User?   @relation("UserCreatedPhrase", fields: [createdById], references: [id])
}

model Province {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReportSection {
  id        String   @id @default(uuid())
  name      String   @unique
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReportTimeFrame {
  id        String   @id @default(uuid())
  name      String   @unique
  hours     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleGroupId String?
  roleGroup   RoleGroup? @relation(fields: [roleGroupId], references: [id])
}

model RoleGroup {
  id        String   @id @default(uuid())
  name      String   @unique
  radio     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[]
}

model SystemConfig {
  id         String   @id @default(uuid())
  opt        String   @unique
  val        String   @db.Text
  systemType Int? // Category
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserTracking {
  id           String   @id @default(uuid())
  action       String
  reportStatus String?
  source       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId    String?
  user      User?    @relation("UserPerformingAction", fields: [userId], references: [id])
  companyId String?
  company   Company? @relation("UserTrackingCompany", fields: [companyId], references: [id])
  reportId  String?
  report    Report?  @relation("UserTrackingReport", fields: [reportId], references: [id])
  subjectId String?
  subject   Subject? @relation("UserTrackingSubject", fields: [subjectId], references: [id])
}
